import 'dart:ffi';
import 'dart:typed_data';
import 'package:ffi/ffi.dart';
import 'package:test/test.dart';
import 'package:assimp/assimp.dart';
import 'package:assimp/src/bindings.dart';
import 'test_utils.dart';

// DO NOT EDIT (generated by tool/testgen)

void main() {
  prepareTest();

  test('size', () {
    expect(sizeOf<aiMetadata>(), equals(24));
  });

  test('equals', () {
    final a = MetaData.fromNative(calloc<aiMetadata>());
    final b = MetaData.fromNative(calloc<aiMetadata>());
    expect(a, equals(a));
    expect(b, equals(b));
    expect(a, isNot(equals(b)));
    expect(b, isNot(equals(a)));
  });

  test('toString', () {
    expect(MetaData.fromNative(calloc<aiMetadata>()).toString(), matches(r'MetaData\(Pointer<aiMetadata>: address=0x[0-f]+\)'));
  });

  test('3mf', () {
    testScene('box.3mf', (scene) {
      final metaData = scene.metaData;
      expect(metaData, isNull);
    });
    testScene('spider.3mf', (scene) {
      final metaData = scene.metaData;
      expect(metaData, isNull);
    });
  });

  test('fbx', () {
    testScene('huesitos.fbx', (scene) {
      final metaData = scene.metaData;
      expect(metaData, isNotNull);
      expect(metaData.keys.length, equals(15));
      expect(metaData.values.length, equals(15));
      expect(metaData.properties.length, equals(15));
      final key_0 = metaData.keys.elementAt(0);
      expect(key_0, equals('UpAxis'));
      final value_0 = metaData.values.elementAt(0);
      expect(value_0.runtimeType, int);
      expect(value_0, equals(1));
      final key_1 = metaData.keys.elementAt(1);
      expect(key_1, equals('UpAxisSign'));
      final value_1 = metaData.values.elementAt(1);
      expect(value_1.runtimeType, int);
      expect(value_1, equals(1));
      final key_2 = metaData.keys.elementAt(2);
      expect(key_2, equals('FrontAxis'));
      final value_2 = metaData.values.elementAt(2);
      expect(value_2.runtimeType, int);
      expect(value_2, equals(2));
      final key_3 = metaData.keys.elementAt(3);
      expect(key_3, equals('FrontAxisSign'));
      final value_3 = metaData.values.elementAt(3);
      expect(value_3.runtimeType, int);
      expect(value_3, equals(1));
      final key_4 = metaData.keys.elementAt(4);
      expect(key_4, equals('CoordAxis'));
      final value_4 = metaData.values.elementAt(4);
      expect(value_4.runtimeType, int);
      expect(value_4, isZero);
      final key_5 = metaData.keys.elementAt(5);
      expect(key_5, equals('CoordAxisSign'));
      final value_5 = metaData.values.elementAt(5);
      expect(value_5.runtimeType, int);
      expect(value_5, equals(1));
      final key_6 = metaData.keys.elementAt(6);
      expect(key_6, equals('OriginalUpAxis'));
      final value_6 = metaData.values.elementAt(6);
      expect(value_6.runtimeType, int);
      expect(value_6, equals(-1));
      final key_7 = metaData.keys.elementAt(7);
      expect(key_7, equals('OriginalUpAxisSign'));
      final value_7 = metaData.values.elementAt(7);
      expect(value_7.runtimeType, int);
      expect(value_7, equals(1));
      final key_8 = metaData.keys.elementAt(8);
      expect(key_8, equals('UnitScaleFactor'));
      final value_8 = metaData.values.elementAt(8);
      expect(value_8.runtimeType, double);
      expect(value_8, moreOrLessEquals(1));
      final key_9 = metaData.keys.elementAt(9);
      expect(key_9, equals('OriginalUnitScaleFactor'));
      final value_9 = metaData.values.elementAt(9);
      expect(value_9.runtimeType, double);
      expect(value_9, moreOrLessEquals(1));
      final key_10 = metaData.keys.elementAt(10);
      expect(key_10, equals('AmbientColor'));
      final value_10 = metaData.values.elementAt(10);
      expect(value_10.runtimeType, Vector3);
      expect(value_10, vector3MoreOrLessEquals(Vector3(0, 0, 0)));
      final key_11 = metaData.keys.elementAt(11);
      expect(key_11, equals('FrameRate'));
      final value_11 = metaData.values.elementAt(11);
      expect(value_11.runtimeType, int);
      expect(value_11, equals(10));
      final key_12 = metaData.keys.elementAt(12);
      expect(key_12, equals('TimeSpanStart'));
      final value_12 = metaData.values.elementAt(12);
      expect(value_12.runtimeType, int);
      expect(value_12, isZero);
      final key_13 = metaData.keys.elementAt(13);
      expect(key_13, equals('TimeSpanStop'));
      final value_13 = metaData.values.elementAt(13);
      expect(value_13.runtimeType, int);
      expect(value_13, isZero);
      final key_14 = metaData.keys.elementAt(14);
      expect(key_14, equals('CustomFrameRate'));
      final value_14 = metaData.values.elementAt(14);
      expect(value_14.runtimeType, double);
      expect(value_14, moreOrLessEquals(25));
    });
  });

  test('collada', () {
    testScene('anims.dae', (scene) {
      final metaData = scene.metaData;
      expect(metaData, isNotNull);
      expect(metaData.keys.length, equals(3));
      expect(metaData.values.length, equals(3));
      expect(metaData.properties.length, equals(3));
      final key_0 = metaData.keys.elementAt(0);
      expect(key_0, equals('AuthoringTool'));
      final value_0 = metaData.values.elementAt(0);
      expect(value_0.runtimeType, String);
      expect(value_0, equals('FBX COLLADA exporter'));
      final key_1 = metaData.keys.elementAt(1);
      expect(key_1, equals('Created'));
      final value_1 = metaData.values.elementAt(1);
      expect(value_1.runtimeType, String);
      expect(value_1, equals('2015-02-03T10:29:10Z'));
      final key_2 = metaData.keys.elementAt(2);
      expect(key_2, equals('Modified'));
      final value_2 = metaData.values.elementAt(2);
      expect(value_2.runtimeType, String);
      expect(value_2, equals('2015-02-03T10:29:10Z'));
    });
    testScene('lib.dae', (scene) {
      final metaData = scene.metaData;
      expect(metaData, isNotNull);
      expect(metaData.keys.length, equals(4));
      expect(metaData.values.length, equals(4));
      expect(metaData.properties.length, equals(4));
      final key_0 = metaData.keys.elementAt(0);
      expect(key_0, equals('Author'));
      final value_0 = metaData.values.elementAt(0);
      expect(value_0.runtimeType, String);
      expect(value_0, equals('Anonymous '));
      final key_1 = metaData.keys.elementAt(1);
      expect(key_1, equals('AuthoringTool'));
      final value_1 = metaData.values.elementAt(1);
      expect(value_1.runtimeType, String);
      expect(value_1, equals('Collada Exporter for Blender 2.6+, by Juan Linietsky (juan@codenix.com) '));
      final key_2 = metaData.keys.elementAt(2);
      expect(key_2, equals('Created'));
      final value_2 = metaData.values.elementAt(2);
      expect(value_2.runtimeType, String);
      expect(value_2, equals('2016-02-04T00:44:39Z     '));
      final key_3 = metaData.keys.elementAt(3);
      expect(key_3, equals('Modified'));
      final value_3 = metaData.values.elementAt(3);
      expect(value_3.runtimeType, String);
      expect(value_3, equals('2016-02-04T00:44:39Z'));
    });
  });

  test('obj', () {
    testScene('spider.obj', (scene) {
      final metaData = scene.metaData;
      expect(metaData, isNull);
    });
  });

}
